{"env_info": "sys.platform: win32\nPython: 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 10:22:32) [MSC v.1900 64 bit (AMD64)]\nCUDA available: False\nGCC: n/a\nPyTorch: 1.8.0+cpu\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 2019\n  - CPU capability usage: AVX2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -DNDEBUG -DUSE_FBGEMM -DUSE_XNNPACK, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cpu\nOpenCV: 4.4.0\nMMCV: 1.4.8\nMMCV Compiler: n/a\nMMCV CUDA Compiler: n/a\nMMGeneration: 0.7.1+\nMMGenerationAdd: 0.1.0+", "config": "model = dict(\n    type='LayoutGAN',\n    generator=dict(\n        type='LayoutNetppGenerator',\n        dim_latent=4,\n        num_label=5,\n        d_model=256,\n        nhead=4,\n        num_layers=8),\n    discriminator=dict(\n        type='LayoutNetppDiscriminator',\n        num_label=5,\n        d_model=256,\n        nhead=4,\n        num_layers=8,\n        max_bbox=50),\n    gan_loss=dict(type='GANLoss', gan_type='wgan-logistic-ns'),\n    disc_auxiliary_loss=[\n        dict(\n            type='MSELoss',\n            loss_weight=10,\n            data_info=dict(pred='bbox_recon', target='bbox_real')),\n        dict(\n            type='CrossEntropy',\n            loss_weight=1,\n            data_info=dict(pred='logit_cls', target='target'))\n    ])\ntrain_cfg = dict(use_ema=True)\ntest_cfg = None\noptimizer = dict(\n    generator=dict(type='Adam', lr=1e-05),\n    discriminator=dict(type='Adam', lr=1e-05))\ndataset_type = 'Magazine'\ntrain_pipeline = [\n    dict(type='LexicographicSort'),\n    dict(type='RandomHorizontalFlip', p=0.5)\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='Magazine',\n        img_root='E:\\comprehensive_library\\mmgeneration_add\\data\\MagImage',\n        split='train',\n        pipeline=[\n            dict(type='LexicographicSort'),\n            dict(type='RandomHorizontalFlip', p=0.5)\n        ],\n        test_mode=False),\n    val=dict(\n        type='Magazine',\n        img_root='E:\\comprehensive_library\\mmgeneration_add\\data\\MagImage',\n        split='val',\n        pipeline=None,\n        test_mode=True))\ncheckpoint_config = dict(interval=500, by_epoch=False, max_keep_ckpts=30)\nlog_config = dict(interval=1, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [\n    dict(\n        type='MMGenVisualizationHook',\n        output_dir='visual',\n        interval=1,\n        rerange=False,\n        bgr2rgb=False,\n        res_name_list=['fake_imgs', 'real_imgs'])\n]\nrunner = dict(\n    type='DynamicIterBasedRunner',\n    is_dynamic_ddp=False,\n    pass_training_status=True)\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 10000)]\nfind_unused_parameters = True\ncudnn_benchmark = True\nopencv_num_threads = 0\nmp_start_method = 'fork'\nlr_config = None\ntotal_iters = 30000\nevaluation = dict(\n    type='LayoutEvalHook',\n    interval=1,\n    metrics=dict(type='FID', num_images=3, inception_pkl=None, bgr2rgb=False),\n    sample_kwargs=dict(sample_model='ema'))\nwork_dir = './results'\ngpu_ids = [0]\n", "seed": 2021, "exp_name": "layoutganpp.py", "hook_msgs": {}}
{"mode": "val", "epoch": 1, "iter": 1, "lr": {"generator": 1e-05, "discriminator": 1e-05}, "fid": 187.70088, "fid_mean": 100.29511260986328, "fid_cov": 87.40576}
{"mode": "val", "epoch": 1, "iter": 2, "lr": {"generator": 1e-05, "discriminator": 1e-05}, "fid": 176.99454, "fid_mean": 96.2998275756836, "fid_cov": 80.69472}
